:{
linlin slo shi dlo dhi v =
    let norm = (v - slo) / shi
    in dlo + norm * (dhi - dlo)
:}

:{
_vertsel :: Eq a => Double -> Pattern a -> Pattern a
_vertsel d p = uncollect $ do
                      xs <- collect p
                      let n = length xs
                          i = round $ (fromIntegral $ n - 1)*d
                      case n < i || i < 0 of
                                  True -> if i < 0 then (return $ [xs!!0]) else (return [xs!!(n-1)])
                                  False -> return [xs!!i]                                            
vertsel :: Eq a => Pattern Double -> Pattern a -> Pattern a
vertsel = patternify _vertsel
:}

-- Arranger :
:{
ncat :: [(Time, Pattern a)] -> Pattern a
ncat = seqPLoop . go 0
  where
    go _     []          = []
    go t_acc ((t, p):ps) = (t_acc, t', p) : go t' ps
      where
        t' = t_acc + t
:}    

:{
-- Hex to Bool represented as a table.
mAlphabet :: [ (Char, String ) ]
mAlphabet =  [ ('0' , "0000" )
             , ('1' , "0001" )
             , ('2' , "0010" )
             , ('3' , "0011" )
             , ('4' , "0100" )
             , ('5' , "0101" )
             , ('6' , "0110" )
             , ('7' , "0111" )
             , ('8' , "1000" )
             , ('9' , "1001" )            
             , ('a' , "1010" )
             , ('b' , "1011" )
             , ('c' , "1100" )
             , ('d' , "1101" )
             , ('e' , "1110" )
             , ('f' , "1111" )
             ]

-- `n` is the number of subdivisions per-cycle in the resulting pattern
-- `s` is the string to be hex-encoded
hexAt :: Int -> [Char] -> Pattern Bool
hexAt n s = parseBP_E $ "{" ++ (mconcat $ map mLookup s') ++ "}%" ++ show n
            where mLookup l = maybe "" id (lookup l mAlphabet)
                  s'        = (map Char.toLower s)

-- A default function with 16 subdivisions per-cycle.
hex :: [Char] -> Pattern Bool
hex s = hexAt 16 s

--  Two convenience functions
structH s = struct (hexAt 16 s)
maskH s = mask (hexAt 16 s)
:}

-- | Chooses from a list of patterns, using a pattern of integers (fold around 0 ).
:{
pickP :: Pattern Int -> [Pattern a] -> Pattern a
pickP = patternify _pickP

_pickP :: Int -> [Pattern a] -> Pattern a
_pickP i ps = ps !! index
            where len   = length ps
                  index = if i <  0 then len + i 
                     else if i >= len then i - len 
                        else i 
:}

-- SUPERFM
:{
let
-- Parameters
    fmamp op          = pF ("amp"     ++ show op)
    fmratio op        = pF ("ratio"   ++ show op)
    fmdetune op       = pF ("detune"  ++ show op)
    fmmod opa opb     = pF ("mod"     ++ show opa ++ show opb )
    fmegrate op step  = pF ("egrate"  ++ show op  ++ show step)
    fmeglevel op step = pF ("eglevel" ++ show op  ++ show step)
    fmfeedback        = pF "feedback"
-- Array functions
    fmparam function init xs = let xs' = [if i < length xs 
                                          then xs !! i 
                                          else init | i <- [0..5]]
                               in foldr (#) (function 1 (head xs')) (zipWith function [2..] (tail xs'))
    lfma     = fmparam fmamp 0
    lfmr     = fmparam fmratio 1
    lfmd     = fmparam fmdetune 0
    lfmer op = fmparam (fmegrate op) 0
    lfmel op = fmparam (fmeglevel op) 0
:}

:{
plyexpWith :: (RealFrac a, Floating a) 
            => Pattern Int ->  Pattern a -> (Pattern b -> Pattern b) ->  Pattern b ->  Pattern b
plyexpWith np bp f p = 
  innerJoin $ ((\n b -> _plyShapeWith n ((`approxRational` 1e-5) . (b**) . fromRational) f p) <$> np <*> bp)  
                              
plyexpOutWith :: (RealFrac a, Floating a) 
            => Pattern Int ->  Pattern a -> (Pattern b -> Pattern b) ->  Pattern b ->  Pattern b
plyexpOutWith np bp f p = 
  innerJoin $ ((\n b -> _plyShapeOutWith n ((`approxRational` 1e-5) . (b**) . fromRational) f p) <$> np <*> bp) 

_plyShapeOutWith :: Int -> (Time -> Time) -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a
_plyShapeOutWith n s f p = innerJoin $ (\v -> timeCat $ zip times (iterate f $ pure v)) <$> p
  where
    starts = map (s . fromIntegral) [0..n]
    times = map (max 0.08) $ zipWith subtract starts (tail starts) 
  
_plyShapeWith :: Int -> (Time -> Time) -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a
_plyShapeWith n s f p = squeezeJoin $ (\v -> timeCat $ zip times (iterate f $ pure v)) <$> p
  where
    starts = map (s . fromIntegral) [0..n]
    times = map (max 0.08) $ zipWith subtract starts (tail starts)  
:}

:{
let
    -- setbpm x = setcps (x/60/4)
    bpm x = cps (x/60/4)
    --
    lock n offset = timeLoop n . ((offset |- (slow n $ run n)) <~)
    --
    sh x p = (~>) x $ p
    shrand x = (sh x $ rand)
    shperlin x = (sh x $ perlin)
    --
    scala = pS "scala"
    xenscale n = map (\x -> x / n * 12) [0..(n-1)]
    xen n p = toScale (xenscale n) p
    --
    sqz effectcycle pat = squeezeJoin $ ((# effectcycle) . pure) <$> pat  
:}
:{
let drumMachine name ps = stack 
                    (map (\ x -> 
                        (# s (name ++| (extractS "s" (x)))) $ x
                        ) ps)
    drumFrom name drum = s (name ++| drum)
    drumM = drumMachine
    drumF = drumFrom
:}
